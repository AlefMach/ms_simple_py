[tool.poetry]
name = "billing-microservice"
version = "0.1.0"
description = "Microservice for billing."
authors = ["Alef Machado <alef_machado@hotmail.com>"]
readme = "README.md"
repository = ""

[information]
contact = ["email"]

[tool.poetry.dependencies]
python = "^3.11.2"
fastapi = "^0.95.2"
fastapi-camelcase = "^1.0.5"
uvicorn = {extras = ["standard"], version = "^0.22.0"}
alembic = "^1.11.1"
tomli = "^2.0.1"
async-lru = "^2.0.2"
httpx = "^0.24.1"
pyjwt = "^2.7.0"
sqlalchemy = {version = "^2.0.15", extras = ["postgresql-asyncpg", "postgresql_psycopg2binary"]}
asyncpg = "^0.27.0"
pydantic = "^1.10.8"
python-dotenv = "^1.0.0"
protobuf = { version = "3.20.1" }
python-dateutil = "^2.8.2"
apscheduler = "^3.10.1"
babel = "^2.12.1"

[tool.poetry.group.dev.dependencies]
aiosqlite = "^0.19.0"
pre-commit = "^3.3.2"
pytest = "^7.3.1"
pytest-dotenv = "^0.5.2"
pytest-env = "^0.8.1"
pytest-asyncio = "^0.21.0"
coverage = "^7.2.7"
# security linter
bandit = "^1.7.5"

# linters
flake8 = "^6.0.0"
flake8-isort = "^6.0.0"
flake8-quotes = "^3.3.2"
flake8-bugbear = "^23.5.9"
flake8-builtins = "^2.1.0"
flake8-pytest-style = "^1.7.2"
flake8-comprehensions = "^3.12.0"
flake8-logging-format = "^0.9.0"
flake8-variables-names = "^0.0.5"

# formatters
black = "^23.3.0"
isort = {version = "^5.12.0", extras = ["pyproject"]}
pytest-cov = "^4.1.0"
pytest-mock = "^3.10.0"
respx = "^0.20.1"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-vv",
    "--strict-config",
    "--strict-markers"
]
testpaths = ["tests"]
asyncio_mode = "strict"
env = [
    "SQLALCHEMY_WARN_20=1",
    "LOG_FORMAT='%(asctime)s %(levelname)s [%(name)s] [%(filename)s:%(lineno)d] - %(message)s'"
]

[tool.coverage.report]
sort = 'Miss'
fail_under = 35
skip_empty = true
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "@(abc\\.)?abstractmethod",
    "def __repr__",
    "raise AssertionError",
    "if __name__ == .__main__.:",
]
omit = [
    # omit everything in env.py
    "src/infra/adapters/database/migration/env.py"
]

[tool.coverage.paths]
source = ["src"]

[tool.coverage.run]
branch = true
source = ["src"]

[tool.isort]
py_version = 310
line_length = 140
profile = "black"
src_paths = ["src", "tests"]

[tool.black]
line-length = 115
target-version = ['py310']
skip_string_normalization = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
